@using System.Security.Claims
@model FoodDeliveryWebApp.Models.Product
@{
    ViewData["Title"] = "Product Deatil Page";
    ViewData["PageType"] = "ProductDetail";
    // Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-xxl py-5">
    <div class="container">
    </div>
</div>

@* <form id="orderForm"> *@
    <div class="container-xxl py-5">
        <div class="row">
            <div class="col-lg-6">
                <img src="@Model.ImageUrl" class="img-fluid" alt="Product Image">
            </div>
            <div class="col-lg-6">
                <h2 class="fw-bold">@Model.Name</h2>
                <p class="text-muted">Category Name: <span class="badge rounded-pill bg-success">@Model.Category.CategoryName</span></p>
                <h3 class="my-4">៛@(Model.Price * 4100) / $@Model.Price</h3>
                <p class="mb-4">@Model.Description</p>
                <div class="d-flex gap-3 mb-4">
                    <input type="hidden" id="orderNo" name="orderNo" value="" />
                    <input type="number" class="form-control" value="1" style="max-width: 80px;">
                    @* <button class="btn btn-primary" type="button">Add to Cart</button> *@
                    <a class="addToCartBtn text-body btn btn-outline-success" href="#" data-product-id="@Model.ProductId">
                        <i class="fa fa-shopping-bag text-primary me-2"></i>Add to Cart
                    </a>
                    <a class="removeFromCartBtn text-body btn btn-outline-success" href="#" data-product-id="@Model.ProductId" style="display: none;">
                        <i class="fa fa-shopping-bag text-primary me-2"></i>Remove from Cart
                    </a>
                </div>
                <div>
                    <button class="btn btn-outline-secondary btn-sm orderCheckoutBtn" type="submit">Order and Checkout</button>
                </div>
            </div>
        </div>
        <ul class="nav nav-tabs mt-5" id="productTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="description-tab" data-bs-toggle="tab" data-bs-target="#description"
                        type="button" role="tab" aria-controls="description" aria-selected="true">
                    Description
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="specs-tab" data-bs-toggle="tab" data-bs-target="#specs" type="button"
                        role="tab" aria-controls="specs" aria-selected="false">
                    Specifications
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="reviews-tab" data-bs-toggle="tab" data-bs-target="#reviews" type="button"
                        role="tab" aria-controls="reviews" aria-selected="false">
                    Reviews
                </button>
            </li>
        </ul>
        <div class="tab-content" id="productTabContent">
            <div class="tab-pane fade show active" id="description" role="tabpanel" aria-labelledby="description-tab">
                <p class="mt-3">
                    @Model.Description
                </p>
            </div>
            <div class="tab-pane fade" id="specs" role="tabpanel" aria-labelledby="specs-tab">
                <table class="table mt-3">
                    <tr>
                        <th>Weight</th>
                        <td>1kg</td>
                    </tr>
                    <tr>
                        <th>Dimensions</th>
                        <td>10 x 20 x 5 cm</td>
                    </tr>
                </table>
            </div>
            <div class="tab-pane fade" id="reviews" role="tabpanel" aria-labelledby="reviews-tab">
                <div class="mt-3">
                    <h5>John Doe</h5>
                    <p>I loved this product! It really changed the way I work.</p>
                    <h5>Jane Smith</h5>
                    <p>Great quality and excellent after-sales service.</p>

                </div>
            </div>
        </div>
    </div>
   @*  @Html.AntiForgeryToken()
</form> *@
@section Scripts
{
    <script type="text/javascript">

        $(document).ready(function () {

            initializeCartState();
            updateCartItemCount();


            $('.addToCartBtn').on('click', function (){
                var button = $(this);
                var productId = $(this).data('product-id');

                // Check if user is logged in or not
                $.get('/FrontPages/CheckLogin', function (isLoggedIn) {
                    if(isLoggedIn){
                        // User is logged in
                        // alert('Product added to your cart.');
                        toastr.success("Product added to your cart.");
                        console.log(isLoggedIn);
                        addToCart(productId, button);
                        updateCartItemCount();
                        console.log(productId, button);
                    }else{
                        // User not logged in
                        toastr.error("Please log in to add the product to your cart.");
                        // alert('Please log in to add the product to your cart.');
                        window.location.href = '/Account/Login';

                    }
                });
            });

            // Attach click event to Remove from Cart buttons
            $('.removeFromCartBtn').on('click', function (isLoggedIn) {
                var productId = $(this).data('product-id');
                if (isLoggedIn) {
                    // User is logged in
                    toastr.success("Product removed from your cart.");
                    console.log(isLoggedIn);
                    removeFromCart(productId, $(this));
                } else {
                    // User not logged in
                    toastr.error("Please log in to add the product to remove your cart.");
                    // alert('Please log in to add the product to your cart.');
                    window.location.href = '/Account/Login';

                }
                
            });

            function updateCartItemCount() {
                $.ajax({
                    url: '/FrontPages/CountCarts',
                    type: 'GET',
                    success: function (data) {
                        // Check if CartItemCount is present in the response
                        console.log(data);
                        if (data && data.cartItemCount !== undefined) {
                            // Update the UI with the cart count
                            $('#cartItemCountContainer').html(
                                `<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            ${data.cartItemCount}
                            <span class="visually-hidden">unread messages</span>
                        </span>`
                            );
                        } else {
                            // No cart found, show 0
                            $('#cartItemCountContainer').html(
                                `<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            0
                            <span class="visually-hidden">unread messages</span>
                        </span>`
                            );
                        }
                    },
                    error: function () {
                        console.error('Error fetching cart count.');
                    }
                });
            }

            function addToCart(productId, button){
                $.post('/FrontPages/AddToCart', {productId: productId}, function(data){
                    if(data.success){
                        // Update button
                        button.removeClass('addToCartBtn').addClass('removeFromCartbtn').text('Remove from Cart');
                        console.log(data);
                    }else{
                        alert(data.message);
                    }
                });
            }

            // Function to remove product from cart
            function removeFromCart(productId, button) {
                $.post('/FrontPages/RemoveFromCart', { productId: productId }, function (data) {
                    if (data.success) {
                        // Update button
                        button.hide();
                        $('.addToCartBtn[data-product-id="' + productId + '"]').show();
                    } else {
                        alert(data.message);
                    }
                });
            }

            function initializeCartState() {
                $('.addToCartBtn').each(function () {
                    var productId = $(this).data('product-id');
                    IsProductInCart(productId); // Call the function to update button visibility
                });
            }


            function IsProductInCart(productId) {
                // Make an AJAX request to check if the product is in the cart
                $.get('/FrontPages/IsProductInCart', { productId: productId }, function (isInCart) {
                    if (isInCart) {
                        // Product is in the cart, update button accordingly
                        $('.addToCartBtn[data-product-id="' + productId + '"]').hide();
                        $('.removeFromCartBtn[data-product-id="' + productId + '"]').show();
                    } else {
                        // Product is not in the cart, update button accordingly
                        $('.addToCartBtn[data-product-id="' + productId + '"]').show();
                        $('.removeFromCartBtn[data-product-id="' + productId + '"]').hide();
                    }
                });
            }


            $('.orderCheckoutBtn').on('click', function () {
                // Collect product ID, user ID, and payment details
                var quantity = parseInt($('input.form-control').val()); // Get quantity from input
                var productId = @Model.ProductId; // Get product ID from the model
                var userId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)'; // Get the user ID
                var productName = '@Model.Name';
                var productPrice = @Model.Price;
                var productImageUrl = '@Model.ImageUrl'; // Assuming you have an ImageUrl property in your model

                // Generate a random order number
                var orderNo = generateOrderNumber();

                // Set the value of the hidden orderNo field
                $('#orderNo').val(orderNo);

                var orderData = {
                    OrderNo: orderNo,
                    ProductId: productId,
                    Quantity: quantity,
                    UserId: userId,
                    ProductName: productName,
                    ProductPrice: productPrice,
                    ProductImageUrl: productImageUrl
                };

                console.log('Order Data:', orderData); // Log orderData for debugging

                // Store order information temporarily (using localStorage for simplicity)
                localStorage.setItem('tempOrder', JSON.stringify(orderData));

                // Encode each part of the order data for the query parameter
                var encodedOrderNo = encodeURIComponent(orderNo);
                var encodedProductId = encodeURIComponent(productId);
                var encodedQuantity = encodeURIComponent(quantity);
                var encodedUserId = encodeURIComponent(userId);
                var encodedProductName = encodeURIComponent(productName);
                var encodedProductPrice = encodeURIComponent(productPrice);
                var encodedProductImageUrl = encodeURIComponent(productImageUrl);

                // Redirect to the payment page with order data as query parameters
                window.location.href = '/Orders/PaymentPage?' +
                    'orderNo=' + encodedOrderNo +
                    '&productId=' + encodedProductId +
                    '&quantity=' + encodedQuantity +
                    '&userId=' + encodedUserId +
                    '&productName=' + encodedProductName +
                    '&productPrice=' + encodedProductPrice +
                    '&productImageUrl=' + encodedProductImageUrl;
            });

            // Function to generate a random order number
            function generateOrderNumber() {
                return 'ORD' + Date.now();
            }


            // // Send AJAX request to save order and payment
            // $.ajax({
            //     url: '/Orders/CreateOrder',
            //     type: 'POST',
            //     contentType: 'application/json',
            //     data: JSON.stringify(orderData),
            //     success: function (orderResult) {
            //         console.log('Order placed successfully:', orderResult);

            //         // Redirect to a payment page or order confirmation page based on your logic
            //         window.location.href = '/Orders/PaymentPage?orderId=' + orderResult.orderId; // Replace with your URL

            //     },
            //     error: function () {
            //         console.error('Error placing order.');
            //         // Handle error
            //     }
            // });

            // $('#orderCheckoutBtn').on('click', function () {
            //     var quantity = parseInt($('input.form-control').val());
            //     var productId = @Model.ProductId;
            //     var userId = '@User.Identity.Name';

            //     // Send AJAX request to get user details (modify with your endpoint)
            //     $.ajax({
            //         url: '/Account/GetUserDetails', // Replace with your endpoint to get user details
            //         type: 'GET',
            //         success: function (userDetails) {
            //             // userDetails should contain the necessary user information including payment details

            //             var paymentData = {
            //                 Name: userDetails.Name,
            //                 CardNo: userDetails.CardNo,
            //                 ExpiryDate: userDetails.ExpiryDate,
            //                 CvvNo: userDetails.CvvNo,
            //                 Address: userDetails.Address,
            //                 PaymentMode: userDetails.PaymentMode
            //                 // Add other payment details as needed
            //             };

            //             var orderData = {
            //                 ProductId: productId,
            //                 Quantity: quantity,
            //                 UserId: userId,
            //                 Payment: paymentData
            //             };

            //             // Send AJAX request to save order and payment
            //             $.ajax({
            //                 url: '/Orders/CreateOrder',
            //                 type: 'POST',
            //                 contentType: 'application/json',
            //                 data: JSON.stringify(orderData),
            //                 success: function (orderResult) {
            //                     console.log('Order placed successfully:', orderResult);
            //                     // Handle success (e.g., redirect to order confirmation page)
            //                 },
            //                 error: function () {
            //                     console.error('Error placing order.');
            //                     // Handle error
            //                 }
            //             });
            //         },
            //         error: function () {
            //             console.error('Error getting user details.');
            //             // Handle error
            //         }
            //     });
            // });



        });

        

    </script>
}
